<?php
/**
 * Created by PhpStorm.
 * User: bobroid
 * Date: 5/28/17
 * Time: 11:09 PM
 */

namespace app\models\forms;

use app\models\Books;
use app\models\BooksPhotos;
use yii\base\Model;
use yii\helpers\BaseInflector;
use yii\helpers\StringHelper;
use yii\web\UploadedFile;

/**
 * Class BookForm
 *
 * @package app\models\forms
 */
class BookForm extends Model
{

    public $id;

    public $slug;

    public $language_code;

    public $title;

    public $description;

    public $download_link;

    public $categories;

    public $photos;

    /**
     * @var UploadedFile
     */
    public $book_file;

    /**
     * @var UploadedFile[]
     */
    public $photos_files;

    /**
     * @return array
     */
    public function rules()
    {
        return [
            [['id'], 'integer'],
            [['slug', 'language_code', 'title', 'description', 'download_link'], 'string'],
            [['language_code', 'title', 'description', 'book_file'], 'required'],
            [['categories', 'photos'], 'safe'],
            [['book_file'], 'file', 'skipOnEmpty' => false, 'extensions' => 'epub, pdf'],
            //[['photos_files'], 'file', 'extensions' => 'png, jpg']
        ];
    }

    public function init()
    {
        $this->language_code = \Yii::$app->language;

        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @param array $data
     * @param null $formName
     * @return bool
     */
    public function load($data, $formName = null)
    {
        $loaded = parent::load($data, $formName);

        if($loaded){
            $this->book_file = UploadedFile::getInstance($this, 'book_file');
            $this->photos_files = UploadedFile::getInstances($this, 'photos_files');
        }

        return $loaded;
    }

    /**
     * @return bool
     */
    public function save(){
        $savedPhotos = [];
        $slug = BaseInflector::slug($this->title);
        $bookNameWithDir = $this->generateBookNameWithDir($slug);

        if($this->book_file->saveAs(\Yii::getAlias('@webroot') . $bookNameWithDir)){
            $this->download_link = $bookNameWithDir;
        }else{
            $this->addError('book_file', \Yii::t('errors', 'Error with file uploading!'));
            return false;
        }

        if(!empty($this->photos_files) && is_array($this->photos_files)){
            if ($this->createDirIfNotExists($slug)) {
                foreach($this->photos_files as $id => $photoFile){
                    $photoName = $this->generatePhotoName($id, $slug, $photoFile);

                    if($photoFile->saveAs(\Yii::getAlias('@webroot') . $photoName)){
                        $savedPhotos[] = $photoName;
                    }
                }
            }
        }

        $this->slug = $slug;

        $book = new Books($this->getAttributes(null, ['categories', 'photos', 'book_file', 'photos_files']));
        $book->creator_id = \Yii::$app->user->id;

        if($book->save()){
            foreach($savedPhotos as $photo){
                $bookPhoto = new BooksPhotos([
                    'book_id'       =>  $book->id,
                    'language_code' =>  $this->language_code,
                    'src'           =>  $photo
                ]);

                $bookPhoto->save();
            }

            return true;
        }

        return false;
    }

    /**
     * @return array
     */
    public function getLanguageCodes(){
        return ['en' => 'en', 'ru' => 'ru', 'uk' => 'uk'];
    }

    /**
     * @param string $bookName
     *
     * @return string
     */
    public function generateBookNameWithDir (string $bookName) {
        $id = time() . '-' . StringHelper::truncate(md5(time()), 10, false);

        return \Yii::$app->params['books_dir'] . DIRECTORY_SEPARATOR . $bookName . $id .
            '-' . $this->language_code . '.' . $this->book_file->extension;
    }

    /**
     * @param int $id
     * @param $bookName
     * @param UploadedFile $photo_file
     *
     * @return string
     */
    public function generatePhotoName (int $id, $slug, UploadedFile $photo_file) {
        $id = time() . '-' . StringHelper::truncate(md5($id), 10);

        return \Yii::$app->params['photos_dir'] . DIRECTORY_SEPARATOR . $slug
            . '-' . $this->language_code . '-' . $id . '.' . $photo_file->extension;
    }

    /**
     * @param string $bookName
     *
     * @return bool
     */
    public function createDirIfNotExists (string $bookName) {
        $dir = \Yii::getAlias('@webroot') . \Yii::$app->params['photos_dir'] . DIRECTORY_SEPARATOR . $bookName . DIRECTORY_SEPARATOR;

        if(is_dir($dir) == false){
            return mkdir($dir);
        }

        return true;
    }

}