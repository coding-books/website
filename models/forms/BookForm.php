<?php
/**
 * Created by PhpStorm.
 * User: bobroid
 * Date: 5/28/17
 * Time: 11:09 PM
 */

namespace app\models\forms;

use app\models\Books;
use app\models\BooksLinks;
use app\models\BooksPhotos;
use app\models\BooksTags;
use app\models\BooksTagsRef;
use Yii;
use yii\base\Model;
use yii\helpers\ArrayHelper;
use yii\helpers\BaseInflector;
use yii\helpers\StringHelper;
use yii\web\UploadedFile;

/**
 * Class BookForm
 *
 * @package app\models\forms
 */
class BookForm extends Model
{

    public $id;

    public $slug;

    public $language_code;

    public $title;

    public $description;

    public $download_link;

    public $photos;

    public $tags;

    public $isNew = true;

    /**
     * @var UploadedFile
     */
    public $book_file;

    /**
     * @var UploadedFile[]
     */
    public $photos_files;

    /**
     * @var Books
     */
    private $bookModel;

    /**
     * @return array
     */
    public function rules()
    {
        return [
            [['id'], 'integer'],
            [['slug', 'language_code', 'title', 'description', 'download_link'], 'string'],
            [['language_code', 'title', 'description'], 'required'],
            [['photos', 'tags'], 'safe'],
            [['book_file'], 'file', 'skipOnEmpty' => true, 'extensions' => 'epub, pdf'],
            //[['photos_files'], 'file', 'extensions' => 'png, jpg']
        ];
    }

    public function init()
    {
        $this->language_code = \Yii::$app->language;

        parent::init(); // TODO: Change the autogenerated stub
    }

    public function attributeLabels()
    {
        return [
            'title' => Yii::t('book', 'Book title with author'),
            'language_code' => Yii::t('book', 'Book language'),
            'tags' => Yii::t('book', 'Book tags'),
            'description' => Yii::t('book', 'Book description'),
            'book_file' => Yii::t('book', 'Book file (pdf, epub)'),
            'photos_files' => Yii::t('book', 'Book cover (jpg, png)'),
        ];
    }

    /**
     * @param Books $bookModel
     */
    public function setBookModel (Books $bookModel) {
        $this->bookModel = $bookModel;
    }

    /**
     * @param array $data
     * @param null $formName
     * @return bool
     */
    public function load($data, $formName = null)
    {
        $loaded = parent::load($data, $formName);

        if($loaded){
            $this->book_file = UploadedFile::getInstance($this, 'book_file');
            $this->photos_files = UploadedFile::getInstances($this, 'photos_files');
        }

        return $loaded;
    }

    /**
     * @return bool
     */
    public function save(){
        $savedPhotos = [];
        $slug = BaseInflector::slug($this->title);
        if (!empty($this->book_file)) {
            $bookNameWithDir = $this->generateBookNameWithDir($slug);
        }

        if (!empty($this->book_file)) {
            if($this->book_file->saveAs(\Yii::getAlias('@webroot') . $bookNameWithDir)){
                $this->download_link = $bookNameWithDir;
            }else{
                $this->addError('book_file', \Yii::t('errors', 'Error with file uploading!'));
                return false;
            }
        }

        if(!empty($this->photos_files) && is_array($this->photos_files)){
            if ($this->createDirIfNotExists($slug)) {
                foreach($this->photos_files as $id => $photoFile){
                    $photoName = $this->generatePhotoName($id, $slug, $photoFile);

                    if($photoFile->saveAs(\Yii::getAlias('@webroot') . $photoName)){
                        $savedPhotos[] = $photoName;
                    }
                }
            }
        }

        $this->slug = $slug;

        $this->bookModel->setAttributes($this->getAttributes(null, ['id', 'photos', 'book_file', 'photos_files', 'tags', 'download_link']));

        $this->bookModel->creator_id = \Yii::$app->user->id;

        if($this->bookModel->save()){
            if (!empty($savedPhotos)) {
                foreach($savedPhotos as $photo) {
                    $bookPhoto = new BooksPhotos([
                        'book_id' => $this->bookModel->id,
                        'language_code' => $this->language_code,
                        'src' => $photo
                    ]);

                    $bookPhoto->save();
                }
            }

            if ($this->isNew) {
                $this->saveTags();
            } else {
                $this->updateTags();
            }

            if (!empty($this->book_file)) {
                (new BooksLinks([
                    'book_id'       =>  $this->bookModel->id,
                    'link'          =>  $this->download_link,
                    'language_code' =>  $this->language_code,
                    'format'        =>  $this->book_file->extension
                ]))->save();
            }

            return true;
        }

        return false;
    }

    /**
     * @param Books $book
     */
    public function loadBook (Books $book) {
        $this->id = $book->id;
        $this->slug = $book->slug;
        $this->language_code = $book->language_code;
        $this->title = $book->title;
        $this->description = $book->description;
        $this->download_link = $book->getDownloadLink();
        $this->photos = $book->getBooksPhotos();
        $this->tags = $this->setTags($book->booksTags);
    }

    /**
     * @return array
     */
    public function getLanguageCodes(){
        return ['en' => 'en', 'ru' => 'ru', 'uk' => 'uk'];
    }

    /**
     * @param string $bookName
     *
     * @return string
     */
    public function generateBookNameWithDir (string $bookName) {
        $id = time() . '-' . StringHelper::truncate(md5(time()), 10, false);

        return \Yii::$app->params['books_dir'] . DIRECTORY_SEPARATOR . $bookName . $id .
            '-' . $this->language_code . '.' . $this->book_file->extension;
    }

    /**
     * @param int $id
     * @param $bookName
     * @param UploadedFile $photo_file
     *
     * @return string
     */
    public function generatePhotoName (int $id, $slug, UploadedFile $photo_file) {
        $id = time() . '-' . StringHelper::truncate(md5($id), 10);

        return \Yii::$app->params['photos_dir'] . DIRECTORY_SEPARATOR . $slug
            . '-' . $this->language_code . '-' . $id . '.' . $photo_file->extension;
    }

    /**
     * @param string $bookName
     *
     * @return bool
     */
    public function createDirIfNotExists (string $bookName) {
        $dir = \Yii::getAlias('@webroot') . \Yii::$app->params['photos_dir'] . DIRECTORY_SEPARATOR . $bookName . DIRECTORY_SEPARATOR;

        if(is_dir($dir) == false){
            return mkdir($dir);
        }

        return true;
    }

    public function setTags($tags){
        $newTags = [];

        if (!empty($tags) && is_array($tags)) {
            foreach ($tags as $tag) {
                $newTags[] = $tag->tag_id;
            }
        }

        return $newTags;
    }

    public function saveTags () {
        $existedTags = ArrayHelper::getColumn(BooksTags::find()->select('id')->where(['in', 'id', $this->tags])->all(), 'id');

        if (!empty($this->tags) && is_array($this->tags)) {
            foreach($this->tags as $tag){
                if(!in_array($tag, $existedTags)){
                    $tag = new BooksTags([
                        'tag'   =>  $tag
                    ]);

                    $tag->save();
                }else{
                    $tag = BooksTags::findOne(['id' => $tag]);
                }

                (new BooksTagsRef(['book_id' => $this->bookModel->id, 'tag_id' => $tag->id]))->save();
            }
        }
    }

    public function updateTags () {
        BooksTagsRef::deleteAllByBookId($this->id);

        $this->saveTags();
    }

}